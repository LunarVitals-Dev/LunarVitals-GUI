/* General Styles */
* {
    font-family: 'Segoe UI', sans-serif;
    font-size: 16px;
    color: #062a61; /* Default text color to dark blue, consistent with other elements */
}

/* Main Window */
QMainWindow {
    background-color: white;
}

/* Toolbar/Navbar */
QToolBar {
    background-color: black;
    border: none;
    height: 60px;
    padding: 0 20px;
}

/* Navigation Buttons */
#navButton {
    background-color: #FF5733;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 8px 16px;
    font-size: 14px;
    font-weight: bold;
}

#navButton:hover {
    background-color: #D94E2F;
}

/* Headers */
#pageHeader {
    color: #062a61;
    font-size: 50px;
    font-weight: bold;
    margin: 20px 0;
    padding: 12px;
    border: none;
    border-radius: 8px;
}

#subHeader {
    color: #062a61;
    font-size: 18px;
    font-weight: bold;
}

/* About Page Text */
#aboutText {
    color: #062a61;
    font-size: 16px;
    line-height: 1.6;
    margin: 20px 40px;
}

/* Combo Box Styling */
QComboBox {
    color: black;
    font-size: 16px;
    background-color: white;
    border: 1px solid gray;
    padding: 4px;
}

QComboBox::drop-down {
    border: none;
}

QComboBox::down-arrow {
    image: url(down_arrow.png); /* You'll need a down_arrow.png image */
    width: 12px;
    height: 12px;
}

QComboBox QAbstractItemView {
    color: black;
    background-color: white;
    selection-background-color: lightblue;
    selection-color: black;
}


/* Button Styling */
QPushButton {
    background-color: #FF5733;
    font-size: 16px;
    color: white;
    border: none;
    padding: 10px;
}

QPushButton:hover {
    background-color: #D94E2F;
}

/* Chart Widget (using the correct selector) */
/* Note:  'pg.PlotWidget' is NOT a valid CSS selector. */
/*        We need to use a class or ID selector. */
/*        The best way is to add a class to the PlotWidget. */
/* In your Python code:  self.chart_widget.setObjectName("chartWidget") */

#chartWidget { /* or .plot-widget if you want to style *all* PlotWidgets */
    background-color: white;
}

/* Custom Legend for Chart (if you are using a custom legend) */
/* This is VERY specific to how PyQtGraph creates legends.  It's brittle. */
.pg-legend {
   background-color: #062a61; /*  This will only affect the background */
    border: 1px solid #ccc;
    font-size: 16px;
}
/* To change legend text color, it's more reliable to do it in Python */
/*  legend.label.setPen(pg.mkPen('white')) */

/* --- New Styles for Data Page --- */
/* Style for the QLabels on the data page */

QLabel {
  color: #062a61; /* Consistent with the rest of your design */
  background-color: transparent; /*  Usually best to let the page background show */
  /* Add padding if you want spacing around the text */
  padding: 2px;
}

/* If you want to specifically style the labels *inside* the data_page, you */
/* can use a more specific selector.  Best practice is to add a class. */
/* In your Python, when creating the data_page:  self.data_page.setObjectName("dataPage") */

#dataPage QLabel {
    font-size: 18px; /*  Slightly larger for data display */
     /* Add any other specific styling for data page labels here */
}

.sensor-box {
    background-color: white;
    padding: 20px;
    margin: 10px;
}

/* Center Image */
#centerImage {
    padding: 10px;
    background-color: white;
    margin: 20px;
}

/* Grid Layout */
QGridLayout {
    spacing: 20px;
}